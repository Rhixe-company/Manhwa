volumes:
  postgres_data: {}
  postgres_data_backups: {}
  traefik: {}
  static: {}
  redis_data: {}

networks:
  app-network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: "192.169.0.0/24"
          gateway: 192.169.0.1

services:
  django: &django
    restart: always
    build:
      context: .
      dockerfile: ./compose/production/django/Dockerfile
      # args:
      #   # These variable can be defined in an .env file in the root of the repo
      #   DJANGO_AWS_STORAGE_BUCKET_NAME: ${DJANGO_AWS_STORAGE_BUCKET_NAME}
      #   DJANGO_AWS_S3_CUSTOM_DOMAIN: ${DJANGO_AWS_S3_CUSTOM_DOMAIN}
    image: rhixe/rhixe_scans:django
    container_name: django
    depends_on:
      redis:
        condition: service_started
      redis-slave:
        condition: service_started
      postgres:
        condition: service_started
      node:
        condition: service_completed_successfully
    volumes:
      - .:/app:z
      - ./rhixe_scans/media:/app/rhixe_scans/media
      - static:/app/static
    env_file:
      - ./.envs/.production/.django
      - ./.envs/.production/.postgres
    command: /start
    networks:
      app-network:
        ipv4_address: 192.169.0.3

  postgres:
    build:
      context: .
      dockerfile: ./compose/production/postgres/Dockerfile
    image: rhixe/rhixe_scans:postgres
    container_name: postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data/
      - postgres_data_backups:/backups

    env_file:
      - ./.envs/.production/.postgres
    networks:
      app-network:
        ipv4_address: 192.169.0.4

  traefik:
    build:
      context: .
      dockerfile: ./compose/production/traefik/Dockerfile
    image: rhixe/rhixe_scans:traefik
    container_name: traefik
    depends_on:
      - django
    volumes:
      - traefik:/etc/traefik/acme
    ports:
      - "0.0.0.0:80:80"
      - "0.0.0.0:443:443"
      - "0.0.0.0:5555:5555"
    networks:
      app-network:
        ipv4_address: 192.169.0.12

  redis:
    restart: always
    build:
      context: .
      dockerfile: ./compose/production/redis/Dockerfile
    image: rhixe/rhixe_scans:redis
    container_name: redis
    volumes:
      - redis_data:/data

    ports:
      - "6379:6379"
    networks:
      app-network:
        ipv4_address: 192.169.0.5

  redis-slave:
    restart: always
    build:
      context: .
      dockerfile: ./compose/production/redis-slave/Dockerfile
    image: rhixe/rhixe_scans:redis-slave
    container_name: redis-slave
    depends_on:
      redis:
        condition: service_started
    ports:
      - "6380:6380"
    networks:
      app-network:
        ipv4_address: 192.169.0.10

  celeryworker:
    <<: *django
    image: rhixe/rhixe_scans:celeryworker
    container_name: celeryworker
    depends_on:
      redis:
        condition: service_started
      redis-slave:
        condition: service_started
      postgres:
        condition: service_started
      django:
        condition: service_started
    command: /start-celeryworker
    env_file:
      - ./.envs/.production/.django
      - ./.envs/.production/.postgres
    networks:
      app-network:
        ipv4_address: 192.169.0.6

  celerybeat:
    <<: *django
    image: rhixe/rhixe_scans:celerybeat
    command: /start-celerybeat
    container_name: celerybeat
    depends_on:
      redis:
        condition: service_started
      redis-slave:
        condition: service_started
      postgres:
        condition: service_started
      django:
        condition: service_started
    env_file:
      - ./.envs/.production/.django
      - ./.envs/.production/.postgres
    networks:
      app-network:
        ipv4_address: 192.169.0.7

  flower:
    <<: *django
    image: rhixe/rhixe_scans:flower

    command: /start-flower
    container_name: flower
    env_file:
      - ./.envs/.production/.django
      - ./.envs/.production/.postgres
    depends_on:
      redis:
        condition: service_started
      redis-slave:
        condition: service_started
      postgres:
        condition: service_started
      django:
        condition: service_started
    networks:
      app-network:
        ipv4_address: 192.169.0.8

  nginx:
    restart: always
    build:
      context: .
      dockerfile: ./compose/production/nginx/Dockerfile
    image: rhixe/rhixe_scans:nginx
    container_name: nginx
    depends_on:
      django:
        condition: service_started
    volumes:
      - ./rhixe_scans/media:/app/media
      - static:/app/static
    networks:
      app-network:
        ipv4_address: 192.169.0.11

  node:
    build:
      context: .
      dockerfile: ./compose/production/node/Dockerfile
    image: rhixe/rhixe_scans:node
    container_name: node

    volumes:
      - .:/app:z
      # http://jdlm.info/articles/2016/03/06/lessons-building-node-app-docker.html
      - /app/node_modules
    command: npm run build
    # ports:
    #   - "3000:3000"
    networks:
      app-network:
        ipv4_address: 192.169.0.9

  # awscli:
  #   build:
  #     context: .
  #     dockerfile: ./compose/production/aws/Dockerfile
  #   env_file:
  #     - ./.envs/.production/.django
  #   volumes:
  #     - postgres_data_backups:/backups:z
