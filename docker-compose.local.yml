# volumes:
#   postgres_data: {}
#   postgres_data_backups: {}
#   redis_data: {}
#   # media: {}
#   # static: {}

networks:
  app-network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: "192.169.0.0/24"
          gateway: 192.169.0.1

services:
  django: &django
    restart: always
    build:
      context: .
      dockerfile: ./compose/local/django/Dockerfile
    image: rhixe/rhixe_scans:django
    container_name: django
    # user: "django:django"
    depends_on:
      redis:
        condition: service_started
      redis-slave:
        condition: service_started
      postgres:
        condition: service_started
      node:
        condition: service_completed_successfully
    env_file:
      - ./.envs/.local/.django
      - ./.envs/.local/.postgres
    volumes:
      - .:/home/bot/app
      - ./rhixe_scans/media:/home/bot/app/rhixe_scans/media
      - ./staticfiles:/home/bot/app/staticfiles
    expose:
      - 5000
    command: /home/bot/start
    networks:
      app-network:
        ipv4_address: 192.169.0.3

  postgres:
    restart: always
    build:
      context: .
      dockerfile: ./compose/production/postgres/Dockerfile
    image: rhixe/rhixe_scans:postgres
    container_name: postgres
    volumes:
      - ./data/postgres_data:/var/lib/postgresql
      - ./data/postgres_data_backups:/backups
    ports:
      - "5432:5432"
    env_file:
      - ./.envs/.local/.postgres
    networks:
      app-network:
        ipv4_address: 192.169.0.4

  redis:
    restart: always
    build:
      context: .
      dockerfile: ./compose/production/redis/Dockerfile
    image: rhixe/rhixe_scans:redis
    container_name: redis
    volumes:
      - ./data/redis_data:/data

    ports:
      - "6379:6379"
    networks:
      app-network:
        ipv4_address: 192.169.0.5

  redis-slave:
    restart: always
    build:
      context: .
      dockerfile: ./compose/production/redis-slave/Dockerfile
    image: rhixe/rhixe_scans:redis-slave
    container_name: redis-slave
    volumes:
      - ./data/redis_data:/data
    depends_on:
      redis:
        condition: service_started
    ports:
      - "6380:6380"
    networks:
      app-network:
        ipv4_address: 192.169.0.10

  celeryworker:
    <<: *django
    image: rhixe/rhixe_scans:celeryworker
    container_name: celeryworker
    depends_on:
      redis:
        condition: service_started
      redis-slave:
        condition: service_started
      postgres:
        condition: service_started
      django:
        condition: service_started
    ports: []
    command: /home/bot/start-celeryworker
    networks:
      app-network:
        ipv4_address: 192.169.0.6

  celerybeat:
    <<: *django
    image: rhixe/rhixe_scans:celerybeat
    container_name: celerybeat
    depends_on:
      redis:
        condition: service_started
      redis-slave:
        condition: service_started
      postgres:
        condition: service_started
      django:
        condition: service_started
    ports: []
    command: /home/bot/start-celerybeat
    networks:
      app-network:
        ipv4_address: 192.169.0.7

  flower:
    <<: *django
    image: rhixe/rhixe_scans:flower
    container_name: flower
    ports:
      - "5555:5555"
    command: /home/bot/start-flower
    depends_on:
      redis:
        condition: service_started
      redis-slave:
        condition: service_started
      postgres:
        condition: service_started
      django:
        condition: service_started
    networks:
      app-network:
        ipv4_address: 192.169.0.8

  nginx:
    restart: always
    build:
      context: .
      dockerfile: ./compose/local/nginx/Dockerfile
    image: rhixe/rhixe_scans:nginx
    container_name: nginx
    depends_on:
      django:
        condition: service_started
    ports:
      - "80:80"

    volumes:
      - ./rhixe_scans/media:/home/bot/app/media
      - ./staticfiles:/home/bot/app/staticfiles
    networks:
      app-network:
        ipv4_address: 192.169.0.11

  node:
    build:
      context: .
      dockerfile: ./compose/local/node/Dockerfile
    image: rhixe/rhixe_scans:node
    container_name: node

    volumes:
      - .:/home/bot/app
      # http://jdlm.info/articles/2016/03/06/lessons-building-node-app-docker.html
      - /home/bot/app/node_modules
    command: npm run build
    # ports:
    #   - "3000:3000"
    networks:
      app-network:
        ipv4_address: 192.169.0.9
